status <- ggplot(land_use, aes(fill=irr_status$total_area, x=irr_status$YEAR, y=irr_status$Wholly_Irrigated_Holdings_ar )) +
geom_point(position="dodge", stat="identity")
status <- status+geom_point+stat_smooth()
ggplotly(status)
runApp()
ggplotly(land_use, aes(fill=irr_status$total_area, x=irr_status$YEAR, y=irr_status$Wholly_Irrigated_Holdings_ar )) +
geom_bar(position="dodge", stat="identity")
status+geom_bar+
ggplotly(status)
status+geom_area()+stat_smooth()
status+geom_contour()+stat_smooth()
tatus+geom_jitter()+stat_smooth()
status+geom_jitter()+stat_smooth()
ggplotly(status)
status+geom_jitter()+stat_smooth()
ggplotly(status+geom_jitter()+stat_smooth())
runApp()
status+geom_crossbar()+stat_smooth()
status+geom_abline())+stat_smooth()
status+geom_density())+stat_smooth()
status+geom_histogram())+stat_smooth()
status+geom_histogram()+stat_smooth()
status+geom_label()+stat_smooth()
status+geom_qq_line()+stat_smooth()
status+geom_path()+stat_smooth()
ggplotly(status+geom_path()+stat_smooth())
runApp()
ggplotly(status+geom_jitter()+stat_smooth())
runApp()
runApp()
runApp()
runApp()
mango <- ggplot(data = mango_p, mapping = aes(x = mango_p$Arrival_Date, y = mango_p$Modal.Price,color=mango_p$Variety)) +
geom_line()
ggplotly(status+geom_jitter()+stat_smooth())
ggplotly(status+geom_jitter()+stat_smooth())
ggplotly(status+geom_jitter()+stat_smooth())
runApp()
runApp()
shiny::runApp()
runApp()
barplot(as.matrix(select(new_graph,value)), main="My Barchart", ylab = "Numbers", cex.lab = 1.5, cex.main = 1.4, beside=TRUE)
other_prices$Crop
runApp()
new_graph <- other_prices[other_prices[,1]=="PADDY",]
x <- ggplot(data = new_graph, mapping = aes(x = new_graph$variable, y = new_graph$value)) +
geom_point()
x <- x+geom_point()+stat_smooth()
ggplotly(x)
runApp()
runApp()
runApp()
runApp()
View(mango_p)
cashew_p <- read.csv("Cashew_price.csv")
View(cashew_p)
cashew_p$arrival_date <- as.Date(cashew_p$arrival_date,format="%d/%m/%Y")
View(cashew_p)
other_prices$variable_date <- as.Date(other_prices$variable,format="%Y")
other_prices$variable <- as.Date(other_prices$variable,format="%Y")
other_prices$variable <- as.Date(other_prices$variable)
as.Date(cashew_p$arrival_date,format="%Y")
other_prices$variable <- as.Date(other_prices$variable,format="%d/%m/%Y")
View(other_prices)
other_prices <- read.csv("Other_p.csv")
other_prices$variable <- as.Date(other_prices$variable,format="%d/%m/%Y")
other_prices <- read.csv("Other_p.csv")
new_graph <- other_prices[other_prices[,1]==input$choose_crop,]
new_graph <- other_prices[other_prices[,1]=="PADDY",]
crops <- c("CASHEW","PADDY","JOWAR","MANGOES")
result <- 0
fruit <- NULL
for (i in crops) {
which_crp <- size[size[,2]==i,]
if(i=="MANGOES"){
what_crp <- mango_p
}
else if(i=="CASHEW"){
what_crp <- cashew_p
}
else{
what_crp <- other_prices
}
x_p <- what_crp$arrival_date
y_p <- what_crp$modal_price
relation_p <- lm(y_p~x_p)
x_c <- which_crp$YEAR
y_c<- which_crp$total_ar
relation_c <- lm(y_c~x_c)
a <- data.frame(x=2021)
print(a)
if(result<predict(relation_c,a)*predict(relation_p,a)){
result <- predict(relation,a)*predict(relation_p,a)
fruit <- i
}
}
print(fruit)
class_size <-c(0.5,1.0,2.0,3.0,4.0,5.0,7.5,10.0,20.0,30.0)
for (x in class_size) {
size <- Crop_Data[Crop_Data[,6]==30.0,]
crops <- c("CASHEW","PADDY","JOWAR","MANGOES")
result <- 0
fruit <- NULL
for (i in crops) {
which_crp <- size[size[,2]==i,]
if(i=="MANGOES"){
what_crp <- mango_p
}
else if(i=="CASHEW"){
what_crp <- cashew_p
}
else{
what_crp <- other_prices
}
x_p <- what_crp$arrival_date
y_p <- what_crp$modal_price
relation_p <- lm(y_p~x_p)
x_c <- which_crp$YEAR
y_c<- which_crp$total_ar
relation_c <- lm(y_c~x_c)
a <- data.frame(x=2021)
print(a)
if(result<predict(relation_c,a)*predict(relation_p,a)){
result <- predict(relation,a)*predict(relation_p,a)
fruit <- i
}
}
print(fruit)
}
runApp()
what_crp <- mango_p
x_p <- what_crp$arrival_date
y_p <- what_crp$modal_price
relation_p <- lm(y_p~x_p)
y_p
x_p
View(what_crp)
x_p <- what_crp$Arrival_Date
y_p <- what_crp$Modal.Price
relation_p <- lm(y_p~x_p)
predict(relation_p,a)
what_crp$Arrival_Date <- as.Date(what_crp$Arrival_Date,format="%Y")
View(what_crp)
format(as.Date(what_crp$Arrival_Date,format="%d-%m-%Y"),"%Y")
what_crp$Arrival_Date <- format(as.Date(what_crp$Arrival_Date,format="%d-%m-%Y"),"%Y")
x_p <- what_crp$Arrival_Date
y_p <- what_crp$Modal.Price
relation_p <- lm(y_p~x_p)
predict(relation_p,a)
predict(relation_c,a)
relation_p <- lm(y_p~x_p)
predict(relation_p,a)
what_crp <- cashew_p
View(what_crp)
what_crp$Arrival_Date <- format(as.Date(what_crp$Arrival_Date,format="%d-%m-%Y"),"%Y")
cashew_p <- read.csv("Cashew_price.csv")
cashew_p$arrival_date <- as.Date(cashew_p$arrival_date,format="%d/%m/%Y")
cashew_p$Arrival_Date <- as.Date(cashew_p$Arrival_Date,format="%d/%m/%Y")
what_crp$Arrival_Date <- format(as.Date(what_crp$Arrival_Date,format="%d-%m-%Y"),"%Y")
what_crp <- cashew_p
what_crp$Arrival_Date <- format(as.Date(what_crp$Arrival_Date,format="%d-%m-%Y"),"%Y")
x_p <- what_crp$Arrival_Date
y_p <- what_crp$Modal.Price
relation_p <- lm(y_p~x_p)
predict(relation_p,a)
predict(relation_c,a)
plot(x_p,y_p)
View(mango_p)
mango_p[mango_p[,5]=="Hapus(Alphaso)",]
what_crp <- mango_p[mango_p[,5]=="Hapus(Alphaso)",]
what_crp$Arrival_Date <- format(as.Date(what_crp$Arrival_Date,format="%d-%m-%Y"),"%Y")
x_p <- what_crp$Arrival_Date
y_p <- what_crp$Modal.Price
relation_p <- lm(y_p~x_p)
predict(relation_p,a)
plot(x_p,y_p)
what_crp <- other_prices
View(what_crp)
what_crp <- other_prices
other_prices <- read.csv("Other_p.csv")
what_crp <- other_prices
x_p <- what_crp$Arrival_Date
y_p <- what_crp$Modal.Price
relation_p <- lm(y_p~x_p)
other_prices <- read.csv("Other_p.csv")
what_crp <- other_prices
x_p <- what_crp$Arrival_Date
y_p <- what_crp$Modal.Price
relation_p <- lm(y_p~x_p)
other_prices <- read.csv("Other_p.csv")
what_crp <- other_prices
x_p <- what_crp$Arrival_Date
y_p <- what_crp$Modal.Price
relation_p <- lm(y_p~x_p)
predict(relation_p,a)
View(which_crp)
View(which_crp)
size <- Crop_Data[Crop_Data[,6]==0.5,]
which_crp <- size[size[,2]==i,]
other_prices[other_prices[,1]==i,]
what_crp <- other_prices[other_prices[,1]==i,]
x_p <- what_crp$Arrival_Date
y_p <- what_crp$Modal.Price
relation_p <- lm(y_p~x_p)
predict(relation_p,a)
plot(x_p,y_p)
what_crp$Arrival_Date <- format(as.Date(what_crp$Arrival_Date,format="%d-%m-%Y"),"%Y")
x_p <- what_crp$Arrival_Date
y_p <- what_crp$Modal.Price
relation_p <- lm(y_p~x_p)
what_crp <- other_prices[other_prices[,1]==i,]
what_crp$Arrival_Date <- format(as.Date(what_crp$Arrival_Date,format="%d-%m-%Y"),"%Y")
x_p <- what_crp$Arrival_Date
y_p <- what_crp$Modal.Price
relation_p <- lm(y_p~x_p)
plot(x_p,y_p)
what_crp <- other_prices[other_prices[,1]==i,]
other_prices$variable <- as.Date(other_prices$variable,format="%d/%m/%Y")
other_prices$Arrival_Date <- as.Date(other_prices$Arrival_Date,format="%d/%m/%Y")
what_crp <- other_prices[other_prices[,1]==i,]
what_crp$Arrival_Date <- format(as.Date(what_crp$Arrival_Date,format="%d-%m-%Y"),"%Y")
x_p <- what_crp$Arrival_Date
y_p <- what_crp$Modal.Price
relation_p <- lm(y_p~x_p)
predict(relation_p,a)
plot(x_p,y_p)
what_crp$Arrival_Date
which_crp$YEAR
other_prices <- read.csv("Other_p.csv")
other_prices <- read.csv("Other_p.csv")
what_crp <- other_prices[other_prices[,1]==i,]
x_p <- what_crp$Arrival_Date
y_p <- what_crp$Modal.Price
relation_p <- lm(y_p~x_p)
predict(relation_p,a)
which_crp$YEAR
what_crp$Arrival_Date
what_crp$Modal.Price
which_crp$total_ar
relation_p
relation_c
predict(relation_c,a)
predict(relation_p,a)
predict(relation_c,a)*predict(relation_p,a)
what_crp <- other_prices[other_prices[,1]==i,]
x_p <- what_crp$Arrival_Date
y_p <- what_crp$Modal.Price
relation_p <- lm(y_p~x_p)
b <- data.frame(x_p=2021)
predict(relation_p,b)
what_crp <- mango_p[mango_p[,5]=="Hapus(Alphaso)",]
what_crp$Arrival_Date <- format(as.Date(what_crp$Arrival_Date,format="%d-%m-%Y"),"%Y")
what_crp <- mango_p[mango_p[,5]=="Hapus(Alphaso)",]
x_p <- what_crp$Arrival_Date
y_p <- what_crp$Modal.Price
relation_p <- lm(y_p~x_p)
predict(relation_p,b)
what_crp <- cashew_p
x_p <- what_crp$Arrival_Date
y_p <- what_crp$Modal.Price
relation_p <- lm(y_p~x_p)
b <- data.frame(x_p=2021)
predict(relation_p,b)
what_crp$Arrival_Date <- format(as.Date(what_crp$Arrival_Date,format="%d-%m-%Y"),"%Y")
what_crp$Arrival_Date <- as.numeric(what_crp$Arrival_Date)
x_p <- what_crp$Arrival_Date
y_p <- what_crp$Modal.Price
relation_p <- lm(y_p~x_p)
predict(relation_p,b)
what_crp <- cashew_p
what_crp$Arrival_Date <- format(as.Date(what_crp$Arrival_Date,format="%d-%m-%Y"),"%Y")
what_crp$Arrival_Date <- as.numeric(what_crp$Arrival_Date)
x_p <- what_crp$Arrival_Date
y_p <- what_crp$Modal.Price
relation_p <- lm(y_p~x_p)
predict(relation_p,b)
what_crp <- mango_p[mango_p[,5]=="Hapus(Alphaso)",]
what_crp$Arrival_Date <- format(as.Date(what_crp$Arrival_Date,format="%d-%m-%Y"),"%Y")
what_crp$Arrival_Date <- as.numeric(what_crp$Arrival_Date)
x_p <- what_crp$Arrival_Date
y_p <- what_crp$Modal.Price
relation_p <- lm(y_p~x_p)
predict(relation_p,b)
runApp()
runApp()
runApp()
size <- Crop_Data[Crop_Data[,6]==input$what,]
size <- Crop_Data[Crop_Data[,6]==0.5,]
crops <- c("CASHEW","PADDY","JOWAR","MANGOES")
result <- 0
fruit <- NULL
for (i in crops) {
which_crp <- size[size[,2]==i,]
if(i=="MANGOES"){
what_crp <- mango_p[mango_p[,5]=="Hapus(Alphaso)",]
what_crp$Arrival_Date <- format(as.Date(what_crp$Arrival_Date,format="%d-%m-%Y"),"%Y")
what_crp$Arrival_Date <- as.numeric(what_crp$Arrival_Date)
}
else if(i=="CASHEW"){
what_crp <- cashew_p
what_crp$Arrival_Date <- format(as.Date(what_crp$Arrival_Date,format="%d-%m-%Y"),"%Y")
what_crp$Arrival_Date <- as.numeric(what_crp$Arrival_Date)
}
else{
what_crp <- other_prices[other_prices[,1]==i,]
what_crp$Arrival_Date <- format(as.Date(what_crp$Arrival_Date,format="%d-%m-%Y"),"%Y")
}
x_p <- what_crp$Arrival_Date
y_p <- what_crp$Modal.Price
relation_p <- lm(y_p~x_p)
x_c <- which_crp$YEAR
y_c<- which_crp$total_ar
relation_c <- lm(y_c~x_c)
a <- data.frame(x_c=2021)
b <- data.frame(x_p=2021)
print(a)
if(result<predict(relation_c,a)*predict(relation_p,b)){
result <- predict(relation,a)*predict(relation_p,b)
fruit <- i
}
}
print(fruit)
size <- Crop_Data[Crop_Data[,6]==0.5,]
crops <- c("CASHEW","PADDY","JOWAR","MANGOES")
result <- 0
fruit <- NULL
for (i in crops) {
which_crp <- size[size[,2]==i,]
if(i=="MANGOES"){
what_crp <- mango_p[mango_p[,5]=="Hapus(Alphaso)",]
what_crp$Arrival_Date <- format(as.Date(what_crp$Arrival_Date,format="%d-%m-%Y"),"%Y")
what_crp$Arrival_Date <- as.numeric(what_crp$Arrival_Date)
}
else if(i=="CASHEW"){
what_crp <- cashew_p
what_crp$Arrival_Date <- format(as.Date(what_crp$Arrival_Date,format="%d-%m-%Y"),"%Y")
what_crp$Arrival_Date <- as.numeric(what_crp$Arrival_Date)
}
else{
what_crp <- other_prices[other_prices[,1]==i,]
what_crp$Arrival_Date <- format(as.Date(what_crp$Arrival_Date,format="%d-%m-%Y"),"%Y")
}
x_p <- what_crp$Arrival_Date
y_p <- what_crp$Modal.Price
relation_p <- lm(y_p~x_p)
x_c <- which_crp$YEAR
y_c<- which_crp$total_ar
relation_c <- lm(y_c~x_c)
a <- data.frame(x_c=2022)
b <- data.frame(x_p=2022)
print(a)
if(result<predict(relation_c,a)*predict(relation_p,b)){
result <- predict(relation,a)*predict(relation_p,b)
fruit <- i
}
}
print(fruit)
runApp()
fruit <- i
runApp()
runApp()
runApp()
i=c("JOWAR")
what_crp <- other_prices[other_prices[,1]==i,]
runApp()
runApp()
new_graph <- other_prices[other_prices[,1]=="PADDY",]
print(input$choose_crop)
runApp()
ggplot(data, aes( fill=Crop_Data$SIZE_CLASS,x=Crop_Data$irr_ar, y=Crop_Data$unirr_ar )) +
geom_line(position="dodge", stat="identity")
irr <- ggplot(data, aes( fill=Crop_Data$SIZE_CLASS,x=Crop_Data$irr_ar, y=Crop_Data$unirr_ar )) +
geom_line(position="dodge", stat="identity")
ggplotly(ir++geom_jitter()+stat_smooth())
irr <- ggplot(data, aes( fill=Crop_Data$SIZE_CLASS,x=Crop_Data$irr_ar, y=Crop_Data$unirr_ar )) +
geom_line(position="dodge", stat="identity")
ggplotly(irr+geom_jitter()+stat_smooth())
irr <- ggplot(data, aes( fill=Crop_Data$SIZE_CLASS,x=Crop_Data$irr_ar, y=Crop_Data$unirr_ar )) +
geom_bar(position="dodge", stat="identity")
ggplotly(irr+geom_jitter()+stat_smooth())
irr <- ggplot(data, aes( fill=Crop_Data$SIZE_CLASS,x=Crop_Data$irr_ar, y=Crop_Data$unirr_ar )) +
geom_area(position="dodge", stat="identity")
ggplotly(irr+geom_jitter()+stat_smooth())
irr <- ggplot(data, aes( fill=Crop_Data$SIZE_CLASS,x=Crop_Data$irr_ar, y=Crop_Data$unirr_ar )) +
geom_area(position="dodge", stat="identity")
ggplotly(irr+geom_area()+stat_smooth())
irr <- ggplot(data, aes( fill=Crop_Data$SIZE_CLASS,x=Crop_Data$irr_ar, y=Crop_Data$unirr_ar )) +
geom_area(position="dodge", stat="identity")
ggplotly(irr+geom_line()+stat_smooth())
irr <- ggplot(data, aes( fill=Crop_Data$SIZE_CLASS,x=Crop_Data$irr_ar, y=Crop_Data$unirr_ar )) +
geom_line(position="dodge", stat="identity")
ggplotly(irr+geom_line()+stat_smooth())
irr <- ggplot(data, aes( fill=Crop_Data$SIZE_CLASS,x=Crop_Data$irr_ar, y=Crop_Data$unirr_ar )) +
geom_bar(position="dodge", stat="identity")
ggplot(data, aes( fill=Crop_Data$SIZE_CLASS,x=Crop_Data$irr_ar, y=Crop_Data$unirr_ar )) +
geom_bar(position="dodge", stat="identity")
View(Crop_Data)
runApp()
runApp()
install.packages('fontawesome')
?icon
runApp()
install.packages("font-awesome")
install.packages("font-awesome")
install.packages("glyphicon")
library(font-awesome)
library(fontawesome)
install.packages("emojifont')
install.packages('emojifont')
p <- ggplot(hapus, aes(x = hapus$Arrival_Date, y = hapus$Modal.Price)) +
geom_point()
?icon
?icon
install.packages('emojifont')
?icon"
"
install.packages('emojifont')
p <- ggplot(hapus, aes(x = hapus$Arrival_Date, y = hapus$Modal.Price)) +
geom_point()
p <- p + geom_point() + stat_smooth()
ggplotly(p)
yuy
print()
install.packages('emojifont')
load.fontawesome()
load.fontawesome()
library(emojifont)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
# Define UI for application that draws a histogram
ui <- fluidPage(
dashboardPage(
dashboardHeader(
title = "Welcome "
),
dashboardSidebar(
sidebarMenu(
menuItem("Crops",
menuSubItem("Pattern",tabName = "pattern"),
menuSubItem("Irrigation",tabName = "irrigation")
),
menuItem("Land",
menuSubItem("Use",tabName = "use",icon = icon(use,)),
menuSubItem("Status",tabName = "status",icon =icon("line chart",class = "fa-line-chart"))),
menuItem("Source of Irrigation",tabName = "sourceofirrigation"),
menuItem("Area Dispersal",tabName = "dooa"),
menuItem("Gross Cropped Area",tabName = "gca"),
menuItem("Crop Prices",
menuSubItem("Mango",tabName = "mangoprice"),
menuSubItem("Other Crops",tabName = "other")),
menuItem("What to Grow?",tabName = "what_to")
)),
dashboardBody(
tabItems(
tabPanel("Map",tags$img(src="Dapoli_map.jpg")),
tabItem(plotOutput("pattern"),tabName = "pattern"),
tabItem(plotOutput("irrigation"), tabName = "irrigation"),
tabItem(plotOutput("use"),tabName = "use"),
tabItem(fluidRow(
box(plotlyOutput("statusline")),
box(plotOutput("statusbar"))
) ,tabName = "status"),
tabItem(plotOutput("sourceofirrigation"),tabName = "sourceofirrigation"),
tabItem(plotOutput("dooa"),tabName = "dooa"),
tabItem(plotOutput("gca"),tabName = "gca"),
tabItem(fluidRow(
plotlyOutput("mangoprices1"),
plotOutput("mangoprices2")
),tabName = "mangoprice"),
tabItem(selectInput("choose_crop","crop",c("PADDY","JOWAR","BAJRA","MAIZE","RAGI","ARHAR(Tur)","MOONG","GROUNDNUT","SUNFLOWER","SOYABEEN","SESAMUM","NIGERSEED")),plotlyOutput("other_prices"),tabName = "other"),
tabItem(
selectInput("what","what",c(0.5,1.0,2.0,3.0,4.0,5.0,7.5,10.0,20.0,30.0)),
selectInput ("Year","future",c(2020:2035)),
textOutput("what"),
tabName = "what_to")
)
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
